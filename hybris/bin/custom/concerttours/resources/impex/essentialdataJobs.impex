# Define the cron job and the job that it wraps
INSERT_UPDATE CronJob; code[unique=true];job(code);singleExecutable;sessionLanguage(isocode)
;sendNewsCronJob;sendNewsJob;false;de

# Define the trigger that periodically invokes the cron job
INSERT_UPDATE Trigger;cronjob(code)[unique=true];cronExpression
#% afterEach: impex.getLastImportedItem().setActivationTime(new Date());
; sendNewsCronJob; 0/10 * * * * ?

#### Groovy script: clearoldconcerts ##########################
#
#import de.hybris.platform.cronjob.enums.*
#import de.hybris.platform.servicelayer.cronjob.PerformResult
#import de.hybris.platform.servicelayer.search.*
#import de.hybris.platform.servicelayer.model.*
#import de.hybris.platform.catalog.enums.ArticleApprovalStatus 
#import concerttours.model.ConcertModel
#  
#searchService = spring.getBean("flexibleSearchService")
#modelService = spring.getBean("modelService")
#query = new FlexibleSearchQuery("Select {pk} from {Concert}");
#searchService.search(query).getResult().each {
#  if (it.daysUntil < 1) 
#  { 
#    it.approvalStatus = ArticleApprovalStatus.CHECK
#  }
#  modelService.saveAll()
#}
################################################################

# Define the ScriptingJob
INSERT_UPDATE ScriptingJob; code[unique= true ];scriptURI
;clearoldconcertsJob;model://clearoldconcerts

# Define the CronJob
INSERT_UPDATE CronJob; code[unique= true ];job(code);sessionLanguage(isocode)
;clearoldconcertsCronJob;clearoldconcertsJob;en

# Define the trigger
INSERT_UPDATE Trigger;cronjob(code)[unique=true];cronExpression
#% afterEach: impex.getLastImportedItem().setActivationTime(new Date());
; clearoldconcertsCronJob; 0/10 * * * * ?